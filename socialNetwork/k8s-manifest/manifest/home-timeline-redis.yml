apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: home-timeline-redis
  namespace: social-network
  labels:
    app: home-timeline-redis
spec:
  replicas: 3
  selector:
    matchLabels:
      app: home-timeline-redis
  template:
    metadata:
      labels:
        app: home-timeline-redis
    spec:
      initContainers:
      - name: init-redis
        image: redis:4.0.9
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.conf /etc/redis.conf
          else
            cp /mnt/config-map/slave.conf /etc/redis.conf
          fi
        volumeMounts:
        - name: redis-config-volume
          mountPath: /mnt/config-map
        - name: conf
          mountPath: /etc
          subPath: redis.conf
      containers:
        - name: redis
          image: redis
          command:
            - "redis-server"
            - "/etc/redis.conf"
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /etc/
              subPath: redis.conf
              name: conf
            - mountPath: /keys
              name: tls-volume
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: tls-volume
          secret:
            secretName: tls
        - name: redis-config-volume
          configMap:
            name: home-timeline-redis-config
        - name: conf
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: home-timeline-redis
  namespace: social-network
spec:
  selector:
    app: home-timeline-redis
  ports:
    - name: redis
      protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
  clusterIP: None